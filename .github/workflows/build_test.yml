name: Build tn3270-ng2 workflow
on:
  push:
    branches:
      - v2.x/staging
      - v2.x/rc
      - v2.x/master
  pull_request:
    types: [opened, reopened, synchronize]

  workflow_dispatch:
    inputs: 
      BRANCH_NAME:
        description: 'Specify branch name or PR (e.g. PR-41)'
        required: false
      BUILD_VERSION:
        description: 'Specify version you would like to build or override'
        required: false
      PERFORM_RELEASE:
        type: boolean
        description: 'Perform release, Defauls is false'
        required: false

jobs:
  check-permission:
    runs-on: ubuntu-latest
    steps:
      # this action will fail the whole workflow if permission check fails
      - name: check permission
        uses: zowe-actions/shared-actions/permission-check@main
        with:
          user: ${{ github.actor }}
          github-repo: ${{ github.repository }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

  update-changelog:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    outputs:
      was_updated: ${{ steps.check-change.outputs.change_detected }}
      check_commit: ${{ steps.check-changelog.outputs.check_commit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Check for updated CHANGELOG.md using git
        id: check-changelog
        run: |
          if git diff --name-only origin/${{ github.base_ref }} | grep -q "^CHANGELOG.md$"; then
            echo "CHANGELOG.md has been updated."
            echo "::set-output name=check_commit::true"
          else
            echo "ERROR: CHANGELOG.md has not been updated."
            echo "::set-output name=check_commit::false"
          fi

      - name: Compare PR description with template
        if: steps.check-changelog.outputs.check_commit == 'false'
        run: |
         PR_DESCRIPTION="${{ github.event.pull_request.body }}"
         echo "$PR_DESCRIPTION" > /tmp/pr_description.txt
         echo "PR DESCRIPTION saved to /tmp/pr_description.txt."
         cat /tmp/pr_description.txt

         # Save the template content to a file
         TEMPLATE_CONTENT=$(sed 's/"//g' .github/pull_request_template.md)
         echo "$TEMPLATE_CONTENT" > /tmp/template_content.txt
         echo "Template content saved to /tmp/template_content.txt."
         cat /tmp/template_content.txt

         # Use diff to compare the two files
         if diff -wB /tmp/pr_description.txt /tmp/template_content.txt > /dev/null; then
           echo "ERROR: PR description is identical to the template."
           exit 1
         else
           echo "PR description and template are different."
         fi

      - name: Extract changelog info
        if: steps.check-changelog.outputs.check_commit == 'false'
        id: extract-changelog
        run: |
          PR_DESCRIPTION=$(cat /tmp/pr_description.txt)
          # Check if "changelog:" exists in PR description
          if echo "$PR_DESCRIPTION" | grep -q "VERSION:" && echo "$PR_DESCRIPTION" | grep -q "CHANGELOG:"; then
            # Extract content after "changelog:"
            CHANGELOG_TEXT=$(echo $PR_DESCRIPTION | sed -n 's/.*CHANGELOG: \(.*\)/\1/p')

            # Check if extracted CHANGELOG_TEXT is empty or identical to the template content
            TEMPLATE_CONTENT=$(cat /tmp/template_content.txt)
            if [ -z "$CHANGELOG_TEXT" ] || [ "$CHANGELOG_TEXT" == "$TEMPLATE_CONTENT" ]; then
              echo "The changelog information after 'CHANGELOG:' cannot be empty or identical to pull_request_template.md."
              exit 1
            fi

            # Extract VERSION: from PR description
            VERSION=$(echo "$PR_DESCRIPTION" | grep -oP 'VERSION:\s*\K\d+\.\d+\.\d+')
            echo "Extracted changelog: $CHANGELOG_TEXT"
            echo "::set-output name=changelog::$CHANGELOG_TEXT"
            echo "::set-output name=version::$VERSION"
          else
            echo -e "No changelog and version information found in PR description. Please add them.\nExpected Format:\nVERSION:vX.XX.X\nCHANGELOG:This is changelog note.\nTo re-run the action, just make a push or commit after updating the PR description or updating the changelog via a manual file changing commit."
            exit 1
          fi

      - name: Check PR body against changelog
        if: steps.check-changelog.outputs.check_commit == 'false'
        run: |
          ESCAPED_CHANGELOG="${{ steps.extract-changelog.outputs.changelog }}"
          ESCAPED_CHANGELOG=$(echo "$ESCAPED_CHANGELOG" | sed "s/'/\\\\'/g")
          VERSION="${{ steps.extract-changelog.outputs.version }}"
          
          if ! grep -Fq "$ESCAPED_CHANGELOG" CHANGELOG.md; then
            # Check if version exists in CHANGELOG.md
            if grep -q "^## \`$VERSION\`" CHANGELOG.md; then
              # Append PR description to existing version
              sed -i "/^## \`$VERSION\`/a - $ESCAPED_CHANGELOG (#${{ github.event.pull_request.number }})" CHANGELOG.md
            else
              # Append new version and PR description
              ANCHOR_LINE=$(awk '/# Basic TN3270 Display Emulator Changelog/ {print NR}' CHANGELOG.md)
              sed -i "$ANCHOR_LINE a\\
              \n##  \`$VERSION\`\n- $ESCAPED_CHANGELOG (#${{ github.event.pull_request.number }})\n" CHANGELOG.md
            fi
            git config --global user.email "zowe-robot@users.noreply.github.com"
            git config --global user.name "Zowe Robot"
            git add CHANGELOG.md
            git commit -s -m "Update changelog with PR #${{ github.event.pull_request.number }} description"
            git push
          fi
      - name: check for changes
        id: check-change
        run: |
          if git diff --name-only HEAD^ HEAD | grep 'changelog.md'; then
            echo "No Changes detected, setting flag to false"
            echo "::set-output name=change_detected::false"
          else
            echo "::set-output name=change_detected::true"
          fi

  check_changelog:
    if: github.event_name == 'pull_request'
    needs: update-changelog
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Verify Changelog update
        run: |
          if [ "${{ needs.update-changelog.outputs.was_updated }}" != "true" ]; then
            echo "CHANGELOG.md not updated, please update CHANGELOG.md with the changes made in the pull request"
            exit 1
          else
            echo "changelog was updated successfully."
          fi    

  build:
    runs-on: ubuntu-latest
    needs: check-permission
    steps:
      - name: '[Prep 1] Checkout'
        uses: actions/checkout@v2

      - name: '[Prep 2] Cache node modules'
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            ~/.npm
            ~/.nvm/.cache
            ~/.nvm/versions
          key: ${{ runner.os }}-build-cache-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-cache-node-modules-
      - name: '[Prep 3] Setup Node'
        uses: actions/setup-node@v2
        with:
          node-version: 16.15.0

      - name: '[Prep 4] Setup jFrog CLI'
        uses: jfrog/setup-jfrog-cli@v2
        env:
          JF_ARTIFACTORY_1: ${{ secrets.JF_ARTIFACTORY_TOKEN }}

      - name: '[Prep 5] prepare workflow'
        uses: zowe-actions/zlux-builds/plugins/prepare-workflow@v2.x/main
        with:
          github-user: ${{ secrets.ZOWE_ROBOT_USER }}
          github-password: ${{ secrets.ZOWE_ROBOT_TOKEN }}
          github-email: ${{ secrets.ZOWE_ROBOT_EMAIL }}
          github-branch: ${{ github.event.inputs.BRANCH_NAME }}
          release: ${{ github.event.inputs.PERFORM_RELEASE }}
          plugin-version: ${{ github.event.inputs.BUILD_VERSION }}

      - name: '[Prep 6] build'
        uses: zowe-actions/zlux-builds/plugins/zlux-plugins@v2.x/main
        with:
          build-zss: false

      - name: '[Prep 7] packaging'
        uses: zowe-actions/zlux-builds/plugins/make-pax@v2.x/main
        with:
          pax-ssh-username: ${{ secrets.SSH_MARIST_USERNAME }}
          pax-ssh-password: ${{ secrets.SSH_MARIST_RACF_PASSWORD }}
          pax-name: tn3270-ng2

      - name: '[Prep 8] deploy '
        uses: zowe-actions/zlux-builds/plugins/deploy-pax@v2.x/main
        
      - name: '[Prep 9] Bump Staging Version '
        if: ${{ github.event.inputs.PERFORM_RELEASE == 'true' && env.RELEASE == 'true' }}
        uses: zowe-actions/zlux-builds/plugins/bump-version@v2.x/main
        env: 
         GITHUB_TOKEN: ${{ secrets.ZOWE_ROBOT_TOKEN }}